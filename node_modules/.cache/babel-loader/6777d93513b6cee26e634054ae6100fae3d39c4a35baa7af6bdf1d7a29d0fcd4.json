{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\valer\\\\OneDrive\\\\Desktop\\\\cardgame\\\\src\\\\solitaire.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { Deck } from \"./deck.js\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UP = 0; // create constants for easier reading\nconst DOWN = 1;\nconst LEFT = 2;\nconst RIGHT = 3;\nfunction Square({\n  value\n}) {\n  // generate square object, taken from tic tac toe tutorial\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 12\n  }, this);\n}\n_c = Square;\nfunction Pair(x, y) {\n  this.x = x;\n  this.y = y;\n}\n_c2 = Pair;\nfunction getRandomOpenSquare(squares) {\n  // get a random open square to add the new value\n  let openSquares = [];\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (squares[i][j] == null) {\n        openSquares.push(new Pair(i, j));\n      }\n    }\n  }\n  let p = openSquares[Math.floor(Math.random() * openSquares.length)];\n  if (p != null) {\n    return [p.x, p.y];\n  } else {\n    return [null, null];\n  }\n}\nfunction newValue() {\n  // return either a 2 (90% of the time) or 4 (10% of the time), to be added when you move\n  if (Math.floor(Math.random() * 10) == 0) {\n    return 4;\n  } else {\n    return 2;\n  }\n}\nfunction move(squares, direction) {\n  // return the new squares to move to\n  let nextSquares = Array.from({\n    length: 4\n  }, () => Array.from({\n    length: 4\n  }, () => null));\n  let merged = Array.from({\n    length: 4\n  }, () => Array.from({\n    length: 4\n  }, () => false));\n  let moved = false;\n  if (direction == UP) {\n    // for up, it needs to count rows forward for the priority\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (squares[i][j] != null) {\n          let x = newPosition(nextSquares, squares, merged, i, j, direction);\n          if (x != null) {\n            nextSquares[x][j] = squares[i][j];\n            if (x != i) {\n              console.log(\"movedup\");\n              moved = true; // track whether or not the tiles moved\n            }\n          }\n        }\n      }\n    }\n  } else if (direction == DOWN) {\n    // for down, it needs to count rows backward for the priority\n    for (let i = 3; i >= 0; i--) {\n      for (let j = 0; j < 4; j++) {\n        if (squares[i][j] != null) {\n          let x = newPosition(nextSquares, squares, merged, i, j, direction);\n          if (x != null) {\n            nextSquares[x][j] = squares[i][j];\n            if (x != i) {\n              console.log(\"moveddown\");\n              moved = true;\n            }\n          }\n        }\n      }\n    }\n  } else if (direction == LEFT) {\n    // for left, it needs to count columns forward for the priority\n    for (let j = 0; j < 4; j++) {\n      for (let i = 0; i < 4; i++) {\n        if (squares[i][j] != null) {\n          let y = newPosition(nextSquares, squares, merged, i, j, direction);\n          if (y != null) {\n            nextSquares[i][y] = squares[i][j];\n            if (y != j) {\n              console.log(\"movedleft\");\n              moved = true;\n            }\n          }\n        }\n      }\n    }\n  } else if (direction == RIGHT) {\n    // for right, it needs to count columns backward for the priority\n    for (let j = 3; j >= 0; j--) {\n      for (let i = 0; i < 4; i++) {\n        if (squares[i][j] != null) {\n          let y = newPosition(nextSquares, squares, merged, i, j, direction);\n          if (y != null) {\n            nextSquares[i][y] = squares[i][j];\n            if (y != j) {\n              console.log(\"movedright\");\n              moved = true;\n            }\n          }\n        }\n      }\n    }\n  }\n  if (moved) {\n    return nextSquares;\n  } else {\n    return null;\n  }\n}\nfunction newPosition(nextSquares, squares, merged, i, j, direction) {\n  // return new position of square\n  if (direction == UP) {\n    // up priority { {0, 0}, {0, 1}, {0, 2}, {0, 3} }, { {1, 0}, {1, 1}, {1, 2}, {1, 3} }, { {2, 0}, {2, 1}, {2, 2}, {2, 3} }, { {3, 0}, {3, 1}, {3, 2}, {3, 3} }\n    if (i == 0) {\n      // if i, j is top row, it does not move\n      return i;\n    }\n    if (i == 1) {\n      // check the next row\n      if (nextSquares[i - 1][j] == null) {\n        // if the higher square is null, it moves there\n        return i - 1; // j stays the same so just return the new i value\n      } else {\n        // otherwise, it does not move unless the top square matches and hasn't been merged yet\n        if (nextSquares[i - 1][j] == squares[i][j] && !merged[i - 1][j]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i - 1][j] = true;\n          return i - 1;\n        }\n        return i;\n      }\n    }\n    if (i == 2) {\n      // check the next row \n      if (nextSquares[i - 2][j] == null) {\n        // if the highest square is null, it moves there\n        return i - 2;\n      }\n      if (nextSquares[i - 1][j] == null) {\n        // if the next highest square is null, it moves there or merges if not already merged\n        if (nextSquares[i - 2][j] == squares[i][j] && !merged[i - 2][j]) {\n          squares[i][j] = squares[i][j] * 2;\n          merged[i - 2][j] = true;\n          return i - 2;\n        }\n        return i - 1;\n      } else {\n        // otherwise, it checks for merge, if not possible then it doesn't move\n        if (nextSquares[i - 1][j] == squares[i][j] && !merged[i - 1][j]) {\n          squares[i][j] = squares[i][j] * 2;\n          merged[i - 1][j] = true;\n          return i - 1;\n        }\n        return i;\n      }\n    }\n    if (i == 3) {\n      // check the next row \n      if (nextSquares[i - 3][j] == null) {\n        // if the highest square is null, it moves there\n        return i - 3;\n      }\n      if (nextSquares[i - 2][j] == null) {\n        // if the next highest square is null, it moves there or merges if not already merged\n        if (nextSquares[i - 3][j] == squares[i][j] && !merged[i - 3][j]) {\n          squares[i][j] = squares[i][j] * 2;\n          merged[i - 3][j] = true;\n          return i - 3;\n        }\n        return i - 2;\n      }\n      if (nextSquares[i - 1][j] == null) {\n        // if the next highest square is null, it moves there or merges if not already merged\n        if (nextSquares[i - 2][j] == squares[i][j] && !merged[i - 2][j]) {\n          squares[i][j] = squares[i][j] * 2;\n          merged[i - 2][j] = true;\n          return i - 2;\n        }\n        return i - 1;\n      } else {\n        // otherwise, it checks for merge, if not possible then it doesn't move\n        if (nextSquares[i - 1][j] == squares[i][j] && !merged[i - 1][j]) {\n          squares[i][j] = squares[i][j] * 2;\n          merged[i - 1][j] = true;\n          return i - 1;\n        }\n        return i;\n      }\n    }\n  } else if (direction == DOWN) {\n    // down priority { {3, 0}, {3, 1}, {3, 2}, {3, 3} }, { {2, 0}, {2, 1}, {2, 2}, {2, 3} }, { {1, 0}, {1, 1}, {1, 2}, {1, 3} }, { {0, 0}, {0, 1}, {0, 2}, {0, 3} }\n    if (i == 3) {\n      // if i, j is bottom row, it does not move\n      return i;\n    }\n    if (i == 2) {\n      // check the next higher row\n      if (nextSquares[i + 1][j] == null) {\n        // if the lower square is null, it moves there\n        return i + 1; // j stays the same so just return the new i value\n      } else {\n        // otherwise, it does not move unless the bottom square matches and hasn't been merged yet\n        if (nextSquares[i + 1][j] == squares[i][j] && !merged[i + 1][j]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i + 1][j] = true;\n          return i + 1;\n        }\n        return i;\n      }\n    }\n    if (i == 1) {\n      // check the next higher row \n      if (nextSquares[i + 2][j] == null) {\n        // if the lowest square is null, it moves there\n        return i + 2;\n      }\n      if (nextSquares[i + 1][j] == null) {\n        // if the next lowest square is null, it moves there or merges if not already merged\n        if (nextSquares[i + 2][j] == squares[i][j] && !merged[i + 2][j]) {\n          squares[i][j] = squares[i][j] * 2;\n          merged[i + 2][j] = true;\n          return i + 2;\n        }\n        return i + 1;\n      } else {\n        // otherwise, it checks for merge, if not possible then it doesn't move\n        if (nextSquares[i + 1][j] == squares[i][j] && !merged[i + 1][j]) {\n          squares[i][j] = squares[i][j] * 2;\n          merged[i + 1][j] = true;\n          return i + 1;\n        }\n        return i;\n      }\n    }\n    if (i == 0) {\n      // check the next row \n      if (nextSquares[i + 3][j] == null) {\n        // if the lowest square is null, it moves there\n        return i + 3;\n      }\n      if (nextSquares[i + 2][j] == null) {\n        // if the next lowest square is null, it moves there\n        if (nextSquares[i + 3][j] == squares[i][j] && !merged[i + 3][j]) {\n          squares[i][j] = squares[i][j] * 2;\n          merged[i + 3][j] = true;\n          return i + 3;\n        }\n        return i + 2;\n      }\n      if (nextSquares[i + 1][j] == null) {\n        // if the next lowest square is null, it moves there\n        if (nextSquares[i + 2][j] == squares[i][j] && !merged[i + 2][j]) {\n          squares[i][j] = squares[i][j] * 2;\n          merged[i + 2][j] = true;\n          return i + 2;\n        }\n        return i + 1;\n      } else {\n        // otherwise, it checks for merge, if not possible then it doesn't move\n        if (nextSquares[i + 1][j] == squares[i][j] && !merged[i + 1][j]) {\n          squares[i][j] = squares[i][j] * 2;\n          merged[i + 1][j] = true;\n          return i + 1;\n        }\n        return i;\n      }\n    }\n  } else if (direction == LEFT) {\n    // left priority { {0, 0}, {1, 0}, {2, 0}, {3, 0} }, { {0, 1}, {1, 1}, {2, 1}, {3, 1} }, { {0, 2}, {1, 2}, {2, 2}, {3, 2} }, { {0, 3}, {1, 3}, {2, 3}, {3, 3} }\n    if (j == 0) {\n      // if i, j is leftmost column, it does not move\n      return j;\n    }\n    if (j == 1) {\n      // check the next column\n      if (nextSquares[i][j - 1] == null) {\n        // if the square is null, it moves there\n        return j - 1; // i stays the same so just return the new j value\n      } else {\n        // otherwise, it does not move unless the left square matches and hasn't been merged yet\n        if (nextSquares[i][j - 1] == squares[i][j] && !merged[i][j - 1]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j - 1] = true;\n          return j - 1;\n        }\n        return j;\n      }\n    }\n    if (j == 2) {\n      // check the next column\n      if (nextSquares[i][j - 2] == null) {\n        // if the leftmost square is null, it moves there\n        return j - 2;\n      }\n      if (nextSquares[i][j - 1] == null) {\n        // if the next square is null, it moves there or merges if not already merged\n        if (nextSquares[i][j - 2] == squares[i][j] && !merged[i][j - 2]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j - 2] = true;\n          return j - 2;\n        }\n        return j - 1;\n      } else {\n        // otherwise, it checks for merge, if not possible then it doesn't move\n        if (nextSquares[i][j - 1] == squares[i][j] && !merged[i][j - 1]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j - 1] = true;\n          return j - 1;\n        }\n        return j;\n      }\n    }\n    if (j == 3) {\n      // check the next row \n      if (nextSquares[i][j - 3] == null) {\n        // if the leftmost square is null, it moves there\n        return j - 3;\n      }\n      if (nextSquares[i][j - 2] == null) {\n        // if the next square is null, it moves there or merges if not already merged\n        if (nextSquares[i][j - 3] == squares[i][j] && !merged[i][j - 3]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j - 3] = true;\n          return j - 3;\n        }\n        return j - 2;\n      }\n      if (nextSquares[i][j - 1] == null) {\n        // if the next square is null, it moves there or merges if not already merged\n        if (nextSquares[i][j - 2] == squares[i][j] && !merged[i][j - 2]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j - 2] = true;\n          return j - 2;\n        }\n        return j - 1;\n      } else {\n        // otherwise, it checks for merge, if not possible then it doesn't move\n        if (nextSquares[i][j - 1] == squares[i][j] && !merged[i][j - 1]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j - 1] = true;\n          return j - 1;\n        }\n        return j;\n      }\n    }\n  } else if (direction == RIGHT) {\n    // right priority { {0, 3}, {1, 3}, {2, 3}, {3, 3} }, { {0, 2}, {1, 2}, {2, 2}, {3, 2} }, { {0, 1}, {1, 1}, {2, 1}, {3, 1} }, { {0, 0}, {1, 0}, {2, 0}, {3, 0} }\n    if (j == 3) {\n      // if i, j is rightmost column, it does not move\n      return j;\n    }\n    if (j == 2) {\n      // check the next column\n      if (nextSquares[i][j + 1] == null) {\n        // if the square is null, it moves there\n        return j + 1; // i stays the same so just return the new j value\n      } else {\n        // otherwise, it does not move unless the right square matches and hasn't been merged yet\n        if (nextSquares[i][j + 1] == squares[i][j] && !merged[i][j + 1]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j + 1] = true;\n          return j + 1;\n        }\n        return j;\n      }\n    }\n    if (j == 1) {\n      // check the next column\n      if (nextSquares[i][j + 2] == null) {\n        // if the rightmost square is null, it moves there\n        return j + 2;\n      }\n      if (nextSquares[i][j + 1] == null) {\n        // if the next square is null, it moves there or merges if not already merged\n        if (nextSquares[i][j + 2] == squares[i][j] && !merged[i][j + 2]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j + 2] = true;\n          return j + 2;\n        }\n        return j + 1;\n      } else {\n        // otherwise, it checks for merge, if not possible then it doesn't move\n        if (nextSquares[i][j + 1] == squares[i][j] && !merged[i][j + 1]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j + 1] = true;\n          return j + 1;\n        }\n        return j;\n      }\n    }\n    if (j == 0) {\n      // check the next row \n      if (nextSquares[i][j + 3] == null) {\n        // if the rightmost square is null, it moves there\n        return j + 3;\n      }\n      if (nextSquares[i][j + 2] == null) {\n        // if the next square is null, it moves there or merges if not already merged\n        if (nextSquares[i][j + 3] == squares[i][j] && !merged[i][j + 3]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j + 3] = true;\n          return j + 3;\n        }\n        return j + 2;\n      }\n      if (nextSquares[i][j + 1] == null) {\n        // if the next square is null, it moves there or merges if not already merged\n        if (nextSquares[i][j + 2] == squares[i][j] && !merged[i][j + 2]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j + 2] = true;\n          return j + 2;\n        }\n        return j + 1;\n      } else {\n        // otherwise, it checks for merge, if not possible then it doesn't move \n        if (nextSquares[i][j + 1] == squares[i][j] && !merged[i][j + 1]) {\n          squares[i][j] = squares[i][j] * 2; // update value \n          merged[i][j + 1] = true;\n          return j + 1;\n        }\n        return j;\n      }\n    }\n  }\n  return null;\n}\nfunction checkStatus(squares) {\n  console.log(\"in check status\");\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      console.log(squares[i][j], i, j);\n      if (squares[i][j] >= 2048) {\n        return true;\n      }\n    }\n  }\n  console.log(\"out of check status\");\n  return false; // keep playing, no win yet\n}\nlet drawpile = new Deck();\nfunction deal() {\n  let newCards = Array.from({\n    length: 7\n  }, () => Array.from({\n    length: 13\n  }, () => null));\n  for (let i = 0; i < 7; i++) {\n    for (let j = 0; j < i + 1; j++) {\n      newCards[i][j] = drawpile.deal_top();\n    }\n  }\n  return newCards;\n}\nexport default function Board() {\n  _s();\n  // board inspired by tic tac toe tutorial\n  const [cards, setCards] = useState(Array.from({\n    length: 7\n  }, () => Array.from({\n    length: 13\n  }, () => null)));\n  const [piles, setPiles] = useState(Array.from({\n    length: 4\n  }, () => Array.from({\n    length: 13\n  }, () => null)));\n  const [start, setStart] = useState(true);\n  if (start) {\n    // shuffle and deal\n    drawpile.shuffle();\n    let newCards = null;\n    newCards = deal();\n    setCards(newCards);\n    setStart(false);\n  }\n  function restart() {\n    setCards(Array.from({\n      length: 7\n    }, () => Array.from({\n      length: 13\n    }, () => null)));\n    drawpile.reset();\n    setStart(true);\n  }\n  document.onkeydown = e => {\n    // control what happens when keys are hit\n    let dir;\n    if (e.code === \"ArrowUp\" || e.code === \"KeyW\") {\n      console.log(\"up pressed\");\n      dir = UP;\n    } else if (e.code === \"ArrowDown\" || e.code === \"KeyS\") {\n      console.log(\"down pressed\");\n      dir = DOWN;\n    } else if (e.code === \"ArrowLeft\" || e.code === \"KeyA\") {\n      console.log(\"left pressed\");\n      dir = LEFT;\n    } else if (e.code === \"ArrowRight\" || e.code === \"KeyD\") {\n      console.log(\"right pressed\");\n      dir = RIGHT;\n    } else {\n      return;\n    }\n    // let nextSquares = move(squares, dir);\n    // if (nextSquares != null) {\n    //   const [i, j] = getRandomOpenSquare(nextSquares);\n    //   if (i != null && j != null) {\n    //     nextSquares[i][j] = newValue();\n    //   }\n    //   setSquares(nextSquares);\n    // }\n  };\n  return (\n    /*#__PURE__*/\n    // return the board object\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: piles[0][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: piles[1][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: piles[2][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: piles[3][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[0][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[0][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[0][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[0][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[0][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[0][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[0][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[1][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[1][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[1][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[1][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[1][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[1][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[1][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[2][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[2][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[2][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[2][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[2][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[2][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[2][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[3][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[3][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[3][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[3][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[3][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[3][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[3][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[4][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[4][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[4][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[4][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[4][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[4][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[4][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[5][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[5][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[5][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[5][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[5][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[5][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[5][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[6][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[6][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[6][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[6][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[6][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[6][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[6][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[7][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[7][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[7][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[7][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[7][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[7][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[7][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[8][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[8][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[8][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[8][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[8][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[8][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[8][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[9][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[9][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[9][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[9][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[9][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[9][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[9][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[10][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[10][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[10][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[10][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[10][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[10][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[10][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[11][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[11][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[11][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[11][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[11][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[11][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[11][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            value: cards[12][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[12][1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[12][2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[12][3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[12][4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[12][5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Square, {\n            value: cards[12][6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  );\n}\n_s(Board, \"TyuXpPhCsKzPEB5ta3AAkfihVJg=\");\n_c3 = Board;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Pair\");\n$RefreshReg$(_c3, \"Board\");","map":{"version":3,"names":["useState","Deck","jsxDEV","_jsxDEV","Fragment","_Fragment","UP","DOWN","LEFT","RIGHT","Square","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Pair","x","y","_c2","getRandomOpenSquare","squares","openSquares","i","j","push","p","Math","floor","random","length","newValue","move","direction","nextSquares","Array","from","merged","moved","newPosition","console","log","checkStatus","drawpile","deal","newCards","deal_top","Board","_s","cards","setCards","piles","setPiles","start","setStart","shuffle","restart","reset","document","onkeydown","e","dir","code","_c3","$RefreshReg$"],"sources":["C:/Users/valer/OneDrive/Desktop/cardgame/src/solitaire.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { Deck } from \"./deck.js\"\r\n\r\nconst UP = 0; // create constants for easier reading\r\nconst DOWN = 1;\r\nconst LEFT = 2;\r\nconst RIGHT = 3;\r\n\r\nfunction Square({ value }) { // generate square object, taken from tic tac toe tutorial\r\n    return <button className=\"square\">{value}</button>;\r\n}\r\n\r\nfunction Pair(x, y) {\r\n  this.x = x;\r\n  this.y = y;\r\n}\r\n\r\nfunction getRandomOpenSquare(squares) { // get a random open square to add the new value\r\n  let openSquares = [];\r\n  for (let i = 0; i < 4; i++) {\r\n    for (let j = 0; j < 4; j++) {\r\n      if (squares[i][j] == null) {\r\n        openSquares.push(new Pair(i, j));\r\n      }\r\n    }\r\n  }\r\n  let p = openSquares[Math.floor(Math.random() * openSquares.length)]\r\n  if (p != null) {\r\n    return [p.x, p.y]; \r\n  }\r\n  else {\r\n    return [null, null]; \r\n  }\r\n}\r\n\r\nfunction newValue() { // return either a 2 (90% of the time) or 4 (10% of the time), to be added when you move\r\n  if (Math.floor(Math.random() * 10) == 0) {\r\n    return 4;\r\n  }\r\n  else {\r\n    return 2;\r\n  }\r\n}\r\n\r\nfunction move(squares, direction) { // return the new squares to move to\r\n  let nextSquares = Array.from({length: 4},()=> Array.from({length: 4}, () => null));\r\n  let merged = Array.from({length: 4},()=> Array.from({length: 4}, () => false));\r\n  let moved = false;\r\n\r\n  if (direction == UP) { // for up, it needs to count rows forward for the priority\r\n    for (let i = 0; i < 4; i++) {\r\n      for (let j = 0; j < 4; j++) {\r\n        if (squares[i][j] != null) {\r\n          let x = newPosition(nextSquares, squares, merged, i, j, direction);\r\n          if (x != null) {\r\n            nextSquares[x][j] = squares[i][j];\r\n            if (x != i) {\r\n              console.log(\"movedup\");\r\n              moved = true; // track whether or not the tiles moved\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  else if (direction == DOWN) { // for down, it needs to count rows backward for the priority\r\n    for (let i = 3; i >= 0; i--) {\r\n      for (let j = 0; j < 4; j++) {\r\n        if (squares[i][j] != null) {\r\n          let x = newPosition(nextSquares, squares, merged, i, j, direction);\r\n          if (x != null) {\r\n            nextSquares[x][j] = squares[i][j];\r\n            if (x != i) {\r\n              console.log(\"moveddown\");\r\n              moved = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  else if (direction == LEFT) { // for left, it needs to count columns forward for the priority\r\n    for (let j = 0; j < 4; j++) {\r\n      for (let i = 0; i < 4; i++) {\r\n        if (squares[i][j] != null) {\r\n          let y = newPosition(nextSquares, squares, merged, i, j, direction);\r\n          if (y != null) {\r\n            nextSquares[i][y] = squares[i][j];\r\n            if (y != j) {\r\n              console.log(\"movedleft\");\r\n              moved = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  else if (direction == RIGHT) { // for right, it needs to count columns backward for the priority\r\n    for (let j = 3; j >= 0; j--) {\r\n      for (let i = 0; i < 4; i++) {\r\n        if (squares[i][j] != null) {\r\n          let y = newPosition(nextSquares, squares, merged, i, j, direction);\r\n          if (y != null) {\r\n            nextSquares[i][y] = squares[i][j];\r\n            if (y != j) {\r\n              console.log(\"movedright\");\r\n              moved = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (moved) {\r\n    return nextSquares;\r\n  }\r\n  else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction newPosition(nextSquares, squares, merged, i, j, direction) { // return new position of square\r\n  if (direction == UP) { // up priority { {0, 0}, {0, 1}, {0, 2}, {0, 3} }, { {1, 0}, {1, 1}, {1, 2}, {1, 3} }, { {2, 0}, {2, 1}, {2, 2}, {2, 3} }, { {3, 0}, {3, 1}, {3, 2}, {3, 3} }\r\n    if (i == 0) { // if i, j is top row, it does not move\r\n      return i;\r\n    }\r\n    if (i == 1) { // check the next row\r\n      if (nextSquares[i - 1][j] == null) { // if the higher square is null, it moves there\r\n        return i - 1; // j stays the same so just return the new i value\r\n      }\r\n      else { // otherwise, it does not move unless the top square matches and hasn't been merged yet\r\n        if (nextSquares[i - 1][j] == squares[i][j] && !merged[i - 1][j]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i - 1][j] = true;\r\n          return i - 1;\r\n        }\r\n        return i;\r\n      }\r\n    }\r\n    if (i == 2) { // check the next row \r\n      if (nextSquares[i - 2][j] == null) { // if the highest square is null, it moves there\r\n        return i - 2;\r\n      }\r\n      if (nextSquares[i - 1][j] == null) { // if the next highest square is null, it moves there or merges if not already merged\r\n        if (nextSquares[i - 2][j] == squares[i][j] && !merged[i - 2][j]) {\r\n          squares[i][j] = squares[i][j] * 2;\r\n          merged[i - 2][j] = true;\r\n          return i - 2;\r\n        }\r\n        return i - 1;\r\n      }\r\n      else { // otherwise, it checks for merge, if not possible then it doesn't move\r\n        if (nextSquares[i - 1][j] == squares[i][j] && !merged[i - 1][j]) {\r\n          squares[i][j] = squares[i][j] * 2;\r\n          merged[i - 1][j] = true;\r\n          return i - 1;\r\n        }\r\n        return i;\r\n      }\r\n    }\r\n    if (i == 3) { // check the next row \r\n      if (nextSquares[i - 3][j] == null) { // if the highest square is null, it moves there\r\n        return i - 3;\r\n      }\r\n      if (nextSquares[i - 2][j] == null) { // if the next highest square is null, it moves there or merges if not already merged\r\n        if (nextSquares[i - 3][j] == squares[i][j] && !merged[i - 3][j]) {\r\n          squares[i][j] = squares[i][j] * 2;\r\n          merged[i - 3][j] = true;\r\n          return i - 3;\r\n        }\r\n        return i - 2;\r\n      }\r\n      if (nextSquares[i - 1][j] == null) { // if the next highest square is null, it moves there or merges if not already merged\r\n        if (nextSquares[i - 2][j] == squares[i][j] && !merged[i - 2][j]) {\r\n          squares[i][j] = squares[i][j] * 2;\r\n          merged[i - 2][j] = true;\r\n          return i - 2;\r\n        }\r\n        return i - 1;\r\n      }\r\n      else { // otherwise, it checks for merge, if not possible then it doesn't move\r\n        if (nextSquares[i - 1][j] == squares[i][j] && !merged[i - 1][j]) {\r\n          squares[i][j] = squares[i][j] * 2;\r\n          merged[i - 1][j] = true;\r\n          return i - 1;\r\n        }\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n  else if (direction == DOWN) { // down priority { {3, 0}, {3, 1}, {3, 2}, {3, 3} }, { {2, 0}, {2, 1}, {2, 2}, {2, 3} }, { {1, 0}, {1, 1}, {1, 2}, {1, 3} }, { {0, 0}, {0, 1}, {0, 2}, {0, 3} }\r\n    if (i == 3) { // if i, j is bottom row, it does not move\r\n      return i;\r\n    }\r\n    if (i == 2) { // check the next higher row\r\n      if (nextSquares[i + 1][j] == null) { // if the lower square is null, it moves there\r\n        return i + 1; // j stays the same so just return the new i value\r\n      }\r\n      else { // otherwise, it does not move unless the bottom square matches and hasn't been merged yet\r\n        if (nextSquares[i + 1][j] == squares[i][j] && !merged[i + 1][j]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i + 1][j] = true;\r\n          return i + 1;\r\n        }\r\n        return i;\r\n      }\r\n    }\r\n    if (i == 1) { // check the next higher row \r\n      if (nextSquares[i + 2][j] == null) { // if the lowest square is null, it moves there\r\n        return i + 2;\r\n      }\r\n      if (nextSquares[i + 1][j] == null) { // if the next lowest square is null, it moves there or merges if not already merged\r\n        if (nextSquares[i + 2][j] == squares[i][j] && !merged[i + 2][j]) {\r\n          squares[i][j] = squares[i][j] * 2;\r\n          merged[i + 2][j] = true;\r\n          return i + 2;\r\n        }\r\n        return i + 1;\r\n      }\r\n      else { // otherwise, it checks for merge, if not possible then it doesn't move\r\n        if (nextSquares[i + 1][j] == squares[i][j] && !merged[i + 1][j]) {\r\n          squares[i][j] = squares[i][j] * 2;\r\n          merged[i + 1][j] = true;\r\n          return i + 1;\r\n        }\r\n        return i;\r\n      }\r\n    }\r\n    if (i == 0) { // check the next row \r\n      if (nextSquares[i + 3][j] == null) { // if the lowest square is null, it moves there\r\n        return i + 3;\r\n      }\r\n      if (nextSquares[i + 2][j] == null) { // if the next lowest square is null, it moves there\r\n        if (nextSquares[i + 3][j] == squares[i][j] && !merged[i + 3][j]) {\r\n          squares[i][j] = squares[i][j] * 2;\r\n          merged[i + 3][j] = true;\r\n          return i + 3;\r\n        }\r\n        return i + 2;\r\n      }\r\n      if (nextSquares[i + 1][j] == null) { // if the next lowest square is null, it moves there\r\n        if (nextSquares[i + 2][j] == squares[i][j] && !merged[i + 2][j]) {\r\n          squares[i][j] = squares[i][j] * 2;\r\n          merged[i + 2][j] = true;\r\n          return i + 2;\r\n        }\r\n        return i + 1;\r\n      }\r\n      else { // otherwise, it checks for merge, if not possible then it doesn't move\r\n        if (nextSquares[i + 1][j] == squares[i][j] && !merged[i + 1][j]) {\r\n          squares[i][j] = squares[i][j] * 2;\r\n          merged[i + 1][j] = true;\r\n          return i + 1;\r\n        }\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n  else if (direction == LEFT) { // left priority { {0, 0}, {1, 0}, {2, 0}, {3, 0} }, { {0, 1}, {1, 1}, {2, 1}, {3, 1} }, { {0, 2}, {1, 2}, {2, 2}, {3, 2} }, { {0, 3}, {1, 3}, {2, 3}, {3, 3} }\r\n    if (j == 0) { // if i, j is leftmost column, it does not move\r\n      return j;\r\n    }\r\n    if (j == 1) { // check the next column\r\n      if (nextSquares[i][j - 1] == null) { // if the square is null, it moves there\r\n        return j - 1; // i stays the same so just return the new j value\r\n      }\r\n      else { // otherwise, it does not move unless the left square matches and hasn't been merged yet\r\n        if (nextSquares[i][j - 1] == squares[i][j] && !merged[i][j - 1]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j - 1] = true;\r\n          return j - 1;\r\n        }\r\n        return j;\r\n      }\r\n    }\r\n    if (j == 2) { // check the next column\r\n      if (nextSquares[i][j - 2] == null) { // if the leftmost square is null, it moves there\r\n        return j - 2;\r\n      }\r\n      if (nextSquares[i][j - 1] == null) { // if the next square is null, it moves there or merges if not already merged\r\n        if (nextSquares[i][j - 2] == squares[i][j] && !merged[i][j - 2]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j - 2] = true;\r\n          return j - 2;\r\n        }\r\n        return j - 1;\r\n      }\r\n      else { // otherwise, it checks for merge, if not possible then it doesn't move\r\n        if (nextSquares[i][j - 1] == squares[i][j] && !merged[i][j - 1]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j - 1] = true;\r\n          return j - 1;\r\n        }\r\n        return j;\r\n      }\r\n    }\r\n    if (j == 3) { // check the next row \r\n      if (nextSquares[i][j - 3] == null) { // if the leftmost square is null, it moves there\r\n        return j - 3;\r\n      }\r\n      if (nextSquares[i][j - 2] == null) { // if the next square is null, it moves there or merges if not already merged\r\n        if (nextSquares[i][j - 3] == squares[i][j] && !merged[i][j - 3]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j - 3] = true;\r\n          return j - 3;\r\n        }\r\n        return j - 2;\r\n      }\r\n      if (nextSquares[i][j - 1] == null) { // if the next square is null, it moves there or merges if not already merged\r\n        if (nextSquares[i][j - 2] == squares[i][j] && !merged[i][j - 2]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j - 2] = true;\r\n          return j - 2;\r\n        }\r\n        return j - 1;\r\n      }\r\n      else { // otherwise, it checks for merge, if not possible then it doesn't move\r\n        if (nextSquares[i][j - 1] == squares[i][j] && !merged[i][j - 1]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j - 1] = true;\r\n          return j - 1;\r\n        }\r\n        return j;\r\n      }\r\n    }\r\n  }\r\n  else if (direction == RIGHT) { // right priority { {0, 3}, {1, 3}, {2, 3}, {3, 3} }, { {0, 2}, {1, 2}, {2, 2}, {3, 2} }, { {0, 1}, {1, 1}, {2, 1}, {3, 1} }, { {0, 0}, {1, 0}, {2, 0}, {3, 0} }\r\n    if (j == 3) { // if i, j is rightmost column, it does not move\r\n      return j;\r\n    }\r\n    if (j == 2) { // check the next column\r\n      if (nextSquares[i][j + 1] == null) { // if the square is null, it moves there\r\n        return j + 1; // i stays the same so just return the new j value\r\n      }\r\n      else { // otherwise, it does not move unless the right square matches and hasn't been merged yet\r\n        if (nextSquares[i][j + 1] == squares[i][j] && !merged[i][j + 1]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j + 1] = true;\r\n          return j + 1;\r\n        }\r\n        return j;\r\n      }\r\n    }\r\n    if (j == 1) { // check the next column\r\n      if (nextSquares[i][j + 2] == null) { // if the rightmost square is null, it moves there\r\n        return j + 2;\r\n      }\r\n      if (nextSquares[i][j + 1] == null) { // if the next square is null, it moves there or merges if not already merged\r\n        if (nextSquares[i][j + 2] == squares[i][j] && !merged[i][j + 2]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j + 2] = true;\r\n          return j + 2;\r\n        }\r\n        return j + 1;\r\n      }\r\n      else { // otherwise, it checks for merge, if not possible then it doesn't move\r\n        if (nextSquares[i][j + 1] == squares[i][j] && !merged[i][j + 1]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j + 1] = true;\r\n          return j + 1;\r\n        }\r\n        return j;\r\n      }\r\n    }\r\n    if (j == 0) { // check the next row \r\n      if (nextSquares[i][j + 3] == null) { // if the rightmost square is null, it moves there\r\n        return j + 3;\r\n      }\r\n      if (nextSquares[i][j + 2] == null) { // if the next square is null, it moves there or merges if not already merged\r\n        if (nextSquares[i][j + 3] == squares[i][j] && !merged[i][j + 3]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j + 3] = true;\r\n          return j + 3;\r\n        }\r\n        return j + 2;\r\n      }\r\n      if (nextSquares[i][j + 1] == null) { // if the next square is null, it moves there or merges if not already merged\r\n        if (nextSquares[i][j + 2] == squares[i][j] && !merged[i][j + 2]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j + 2] = true;\r\n          return j + 2;\r\n        }\r\n        return j + 1;\r\n      }\r\n      else { // otherwise, it checks for merge, if not possible then it doesn't move \r\n        if (nextSquares[i][j + 1] == squares[i][j] && !merged[i][j + 1]) {\r\n          squares[i][j] = squares[i][j] * 2; // update value \r\n          merged[i][j + 1] = true;\r\n          return j + 1;\r\n        }\r\n        return j;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction checkStatus(squares) {\r\n  console.log(\"in check status\");\r\n  for (let i = 0; i < 4; i++) {\r\n    for (let j = 0; j < 4; j++) {\r\n      console.log(squares[i][j], i, j);\r\n      if (squares[i][j] >= 2048) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  console.log(\"out of check status\");\r\n  return false; // keep playing, no win yet\r\n}\r\n\r\nlet drawpile = new Deck;\r\n\r\nfunction deal() {\r\n  let newCards = Array.from({length: 7},()=> Array.from({length: 13}, () => null));\r\n  for (let i = 0; i < 7; i++) {\r\n    for (let j = 0; j < i + 1; j++) {\r\n      newCards[i][j] = drawpile.deal_top();\r\n    }\r\n  }\r\n  return newCards;\r\n}\r\n\r\nexport default function Board() { // board inspired by tic tac toe tutorial\r\n  const [cards, setCards] = useState(Array.from({length: 7},()=> Array.from({length: 13}, () => null)));\r\n  const [piles, setPiles] = useState(Array.from({length: 4},()=> Array.from({length: 13}, () => null)));\r\n  const [start, setStart] = useState(true);\r\n    if (start) { // shuffle and deal\r\n      drawpile.shuffle();\r\n      let newCards = null;\r\n      newCards = deal();\r\n      setCards(newCards);\r\n      setStart(false);\r\n    }\r\n\r\n    function restart() {\r\n      setCards(Array.from({length: 7},()=> Array.from({length: 13}, () => null)));\r\n      drawpile.reset();\r\n      setStart(true);\r\n    }\r\n\r\n    document.onkeydown = (e) => { // control what happens when keys are hit\r\n      let dir;\r\n      if (e.code === \"ArrowUp\" || e.code === \"KeyW\") {\r\n        console.log(\"up pressed\");\r\n        dir = UP;\r\n      } \r\n      else if (e.code === \"ArrowDown\" || e.code === \"KeyS\") {\r\n        console.log(\"down pressed\");\r\n        dir = DOWN;\r\n      } \r\n      else if (e.code === \"ArrowLeft\" || e.code === \"KeyA\") {\r\n        console.log(\"left pressed\");\r\n        dir = LEFT;\r\n      } \r\n      else if (e.code === \"ArrowRight\" || e.code === \"KeyD\") {\r\n        console.log(\"right pressed\");\r\n        dir = RIGHT;\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n      // let nextSquares = move(squares, dir);\r\n      // if (nextSquares != null) {\r\n      //   const [i, j] = getRandomOpenSquare(nextSquares);\r\n      //   if (i != null && j != null) {\r\n      //     nextSquares[i][j] = newValue();\r\n      //   }\r\n      //   setSquares(nextSquares);\r\n      // }\r\n    };\r\n    return ( // return the board object\r\n      <>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={1} />\r\n            <Square value={2} />\r\n            <Square value={3} />\r\n            <Square value={4} />\r\n            <Square value={piles[0][0]} />\r\n            <Square value={piles[1][0]} />\r\n            <Square value={piles[2][0]} />\r\n            <Square value={piles[3][0]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[0][0]} />\r\n            <Square value={cards[0][1]} />\r\n            <Square value={cards[0][2]} />\r\n            <Square value={cards[0][3]} />\r\n            <Square value={cards[0][4]} />\r\n            <Square value={cards[0][5]} />\r\n            <Square value={cards[0][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[1][0]} />\r\n            <Square value={cards[1][1]} />\r\n            <Square value={cards[1][2]} />\r\n            <Square value={cards[1][3]} />\r\n            <Square value={cards[1][4]} />\r\n            <Square value={cards[1][5]} />\r\n            <Square value={cards[1][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[2][0]} />\r\n            <Square value={cards[2][1]} />\r\n            <Square value={cards[2][2]} />\r\n            <Square value={cards[2][3]} />\r\n            <Square value={cards[2][4]} />\r\n            <Square value={cards[2][5]} />\r\n            <Square value={cards[2][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[3][0]} />\r\n            <Square value={cards[3][1]} />\r\n            <Square value={cards[3][2]} />\r\n            <Square value={cards[3][3]} />\r\n            <Square value={cards[3][4]} />\r\n            <Square value={cards[3][5]} />\r\n            <Square value={cards[3][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[4][0]} />\r\n            <Square value={cards[4][1]} />\r\n            <Square value={cards[4][2]} />\r\n            <Square value={cards[4][3]} />\r\n            <Square value={cards[4][4]} />\r\n            <Square value={cards[4][5]} />\r\n            <Square value={cards[4][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[5][0]} />\r\n            <Square value={cards[5][1]} />\r\n            <Square value={cards[5][2]} />\r\n            <Square value={cards[5][3]} />\r\n            <Square value={cards[5][4]} />\r\n            <Square value={cards[5][5]} />\r\n            <Square value={cards[5][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[6][0]} />\r\n            <Square value={cards[6][1]} />\r\n            <Square value={cards[6][2]} />\r\n            <Square value={cards[6][3]} />\r\n            <Square value={cards[6][4]} />\r\n            <Square value={cards[6][5]} />\r\n            <Square value={cards[6][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[7][0]} />\r\n            <Square value={cards[7][1]} />\r\n            <Square value={cards[7][2]} />\r\n            <Square value={cards[7][3]} />\r\n            <Square value={cards[7][4]} />\r\n            <Square value={cards[7][5]} />\r\n            <Square value={cards[7][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[8][0]} />\r\n            <Square value={cards[8][1]} />\r\n            <Square value={cards[8][2]} />\r\n            <Square value={cards[8][3]} />\r\n            <Square value={cards[8][4]} />\r\n            <Square value={cards[8][5]} />\r\n            <Square value={cards[8][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[9][0]} />\r\n            <Square value={cards[9][1]} />\r\n            <Square value={cards[9][2]} />\r\n            <Square value={cards[9][3]} />\r\n            <Square value={cards[9][4]} />\r\n            <Square value={cards[9][5]} />\r\n            <Square value={cards[9][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[10][0]} />\r\n            <Square value={cards[10][1]} />\r\n            <Square value={cards[10][2]} />\r\n            <Square value={cards[10][3]} />\r\n            <Square value={cards[10][4]} />\r\n            <Square value={cards[10][5]} />\r\n            <Square value={cards[10][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[11][0]} />\r\n            <Square value={cards[11][1]} />\r\n            <Square value={cards[11][2]} />\r\n            <Square value={cards[11][3]} />\r\n            <Square value={cards[11][4]} />\r\n            <Square value={cards[11][5]} />\r\n            <Square value={cards[11][6]} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-screen\">\r\n          <div className=\"board-row\">\r\n            <Square value={cards[12][0]} />\r\n            <Square value={cards[12][1]} />\r\n            <Square value={cards[12][2]} />\r\n            <Square value={cards[12][3]} />\r\n            <Square value={cards[12][4]} />\r\n            <Square value={cards[12][5]} />\r\n            <Square value={cards[12][6]} />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}